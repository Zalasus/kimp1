binary-debuggable-source
0000 0000 f iomon.asm
0000 0000 s 
0000 0000 s 
0000 0000 s     org $0000
0000 0000 s 
0000 0000 s 
0000 0000 s     include ../../kimp1def.inc
0000 0000 f ../../kimp1def.inc
0000 0000 s 
0000 0000 s ;-----------------------------------
0000 0000 s ;           Defition file
0000 0000 s ;       for the KIMP1 system
0000 0000 s ;
0000 0000 s ;      Copyleft 2016  Zalasus
0000 0000 s ;-----------------------------------
0000 0000 s 
0000 0000 s 
0000 0000 s CPU_SPEED: equ 2457600 ; 2.4576 MHz default clock
0000 0000 s 
0000 0000 s ROM_END:   equ $2000 ; adress of first byte NOT in ROM anymore
0000 0000 s RAM_END:   equ $FFFF ; last byte in RAM
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;=============== CPU BOARD HARDWARE =================
0000 0000 s 
0000 0000 s ;-------------82C51 USART-------------
0000 0000 s IO_UART_DAT: equ $00 ; UART Data Register
0000 0000 s IO_UART_COM: equ $01 ; UART Command/Mode register
0000 0000 s 
0000 0000 s ; command register bits
0000 0000 s BIT_UART_TXEN:        equ 0 
0000 0000 s BIT_UART_DTR:         equ 1 ; 1=pin low, tied to status LED (1=led off)
0000 0000 s BIT_UART_RXEN:        equ 2
0000 0000 s BIT_UART_SEND_BREAK:  equ 3
0000 0000 s BIT_UART_RESET_ERROR: equ 4
0000 0000 s BIT_UART_RTS:         equ 5 ; 1=output low
0000 0000 s BIT_UART_INT_RESET:   equ 6
0000 0000 s BIT_UART_HUNT_MODE:   equ 7 ; unused in async mode
0000 0000 s 
0000 0000 s ; status register bits
0000 0000 s BIT_UART_TXRDY:       equ 0
0000 0000 s BIT_UART_RXRDY:       equ 1
0000 0000 s BIT_UART_TXEMPTY:     equ 2
0000 0000 s BIT_UART_PARITY_ERR:  equ 3
0000 0000 s BIT_UART_OVERRUN_ERR: equ 4
0000 0000 s BIT_UART_FRAMING_ERR: equ 5
0000 0000 s BIT_UART_SYNDET:      equ 6
0000 0000 s BIT_UART_DSR:         equ 7 ;1=pin low, tied to button (1=button pressed)
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;-------------82C53 PIT-------------
0000 0000 s IO_PIT_C0:   equ $10 ; PIT Timer Register 0
0000 0000 s IO_PIT_C1:   equ $11 ; PIT Timer Register 1
0000 0000 s IO_PIT_C2:   equ $12 ; PIT Timer Register 2
0000 0000 s IO_PIT_CTRL: equ $13 ; PIT Control Register (write only)
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;-------------Tape Counter Control Register-------------
0000 0000 s IO_TCCR:             equ $20
0000 0000 s 
0000 0000 s BIT_TCCR_ROM_GATE:        equ 0
0000 0000 s BIT_TCCR_IO_RESET:        equ 1 ; write only
0000 0000 s BIT_TCCR_TAPE_SENSE:      equ 1 ; read only
0000 0000 s BIT_TCCR_C0_GATE:         equ 2
0000 0000 s BIT_TCCR_C1_GATE:         equ 3
0000 0000 s BIT_TCCR_C2_GATE:         equ 4
0000 0000 s BIT_TCCR_C1_INT_ENABLE:   equ 5
0000 0000 s BIT_TCCR_TAPE_MOTOR:      equ 6 ; write only
0000 0000 s BIT_TCCR_C0_OUT:          equ 6 ; read only
0000 0000 s BIT_TCCR_TAPE_DATA_WRITE: equ 7 ; write only
0000 0000 s BIT_TCCR_TAPE_DATA_READ:  equ 7 ; read only
0000 0000 s ; 0 in this mask means the respective bit is not the same meaning when reading 
0000 0000 s ;  from than when writing to TCCR
0000 0000 s IO_TCCR_WRITE_MASK:  equ $3D
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;=============== EXTENSION BOARD HARDWARE =================
0000 0000 s 
0000 0000 s ;-------------WD37C65 FLOPPY CONTROLLER-------------
0000 0000 s IO_FDC_STAT: equ $30
0000 0000 s IO_FDC_DATA: equ $31
0000 0000 s IO_FDC_OPER: equ $34
0000 0000 s IO_FDC_CONT: equ $38 ; write only
0000 0000 s 
0000 0000 s ; Note: The register descriptions in the crap datasheet of the WD37C65 were
0000 0000 s ;  mostly incorrect. These bit assignments were obtained by comparing the WD37C65
0000 0000 s ;  datasheet with the (mostly) compatible NEC uPD765 and are assumed to be correct
0000 0000 s 
0000 0000 s ; master status register bits
0000 0000 s BIT_FDC_FDD0_BUSY:          equ 0
0000 0000 s BIT_FDC_FDD1_BUSY:          equ 1
0000 0000 s BIT_FDC_FDD2_BUSY:          equ 2
0000 0000 s BIT_FDC_FDD3_BUSY:          equ 3
0000 0000 s BIT_FDC_BUSY:               equ 4
0000 0000 s BIT_FDC_EXEC_MODE:          equ 5
0000 0000 s BIT_FDC_DATA_INPUT:         equ 6
0000 0000 s BIT_FDC_REQUEST_FOR_MASTER: equ 7
0000 0000 s 
0000 0000 s ; master status register 1
0000 0000 s BIT_FDC_POWERDOWN:         equ 0
0000 0000 s 
0000 0000 s ; operation register bits
0000 0000 s BIT_FDC_DRIVE_SELECT:      equ 0
0000 0000 s BIT_FDC_SOFT_RESET:        equ 2 ; active low
0000 0000 s BIT_FDC_DMA_ENABLE:        equ 3
0000 0000 s BIT_FDC_MOTOR_ENABLE_1:    equ 4
0000 0000 s BIT_FDC_MOTOR_ENABLE_2:    equ 5
0000 0000 s BIT_FDC_MODE_SELECT:       equ 7
0000 0000 s 
0000 0000 s ; control register bits
0000 0000 s BIT_FDC_DATARATE0:       equ 0
0000 0000 s BIT_FDC_DATARATE1:       equ 1
0000 0000 s BIT_FDC_DISABLE_PRECOMP: equ 2
0000 0000 s 
0000 0000 s ; status register 0 bits
0000 0000 s BIT_FDC_SR0_UNIT_SELECT_0: equ 0
0000 0000 s BIT_FDC_SR0_UNIT_SELECT_1: equ 1
0000 0000 s BIT_FDC_HEAD_SELECT:       equ 2
0000 0000 s BIT_FDC_NOT_READY:         equ 3 ; always 0
0000 0000 s BIT_FDC_EQUIPMENT_CHECK:   equ 4
0000 0000 s BIT_FDC_SEEK_END:          equ 5
0000 0000 s BIT_FDC_INTERRUPT_CODE0:   equ 6 ; 11******=ready line, 00=normal termination, 01=abnormal, 10=invalid command
0000 0000 s BIT_FDC_INTERRUPT_CODE1:   equ 7
0000 0000 s 
0000 0000 s ; status register 1 bits
0000 0000 s BIT_FDC_MISSING_ADRESS_MARK: equ 0
0000 0000 s BIT_FDC_NOT_WRITEABLE:       equ 1
0000 0000 s BIT_FDC_NO_DATA:             equ 2
0000 0000 s BIT_FDC_OVERRUN:             equ 4
0000 0000 s BIT_FDC_DATA_ERROR:          equ 5
0000 0000 s BIT_FDC_END_OF_CYLINDER:     equ 7
0000 0000 s 
0000 0000 s ; status register 2 bits
0000 0000 s BIT_FDC_MISSING_ADRESS_MARK_IN_DATA_FIELD: equ 0
0000 0000 s BIT_FDC_BAD_CYLINDER:                      equ 1
0000 0000 s BIT_FDC_SCAN_NOT:                          equ 2
0000 0000 s BIT_FDC_SCAN_EQUAL:                        equ 3
0000 0000 s BIT_FDC_WRONG_CYLINDER:                    equ 4
0000 0000 s BIT_FDC_SR3_DATA_ERROR:                    equ 5
0000 0000 s BIT_FDC_CONTROL_MARK:                      equ 6
0000 0000 s 
0000 0000 s ; status register 3 bits
0000 0000 s BIT_FDC_UNIT_SELECT_0:          equ 0
0000 0000 s BIT_FDC_UNIT_SELECT_1:          equ 1
0000 0000 s BIT_FDC_HEAD_SELECT:            equ 2
0000 0000 s BIT_FDC_WRITE_PROTECTED:        equ 3 ; active low
0000 0000 s BIT_FDC_TRACK_0:                equ 4
0000 0000 s BIT_FDC_READY:                  equ 5 ; always 1
0000 0000 s BIT_FDC_WRITE_PROTECTED_LEGACY: equ 6 ; active low
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;---------------Control Registers--------------
0000 0000 s IO_IVR_FDC:   equ $3C
0000 0000 s IO_IVR_RTC:   equ $3D
0000 0000 s IO_EBCR:      equ $3E
0000 0000 s 
0000 0000 s BIT_EBCR_TEST:            equ 0
0000 0000 s BIT_EBCR_IRQ_OPL:         equ 7  ; active low
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ;--------------------MSM6242B RTC----------------------
0000 0000 s ; NOTE: This is a 4-bit device. When reading registers, the upper
0000 0000 s ;  nibble of the databus is undefined
0000 0000 s IO_RTC_S1:       equ $40
0000 0000 s IO_RTC_S10:      equ $41
0000 0000 s IO_RTC_MI1:      equ $42
0000 0000 s IO_RTC_MI10:     equ $43
0000 0000 s IO_RTC_H1:       equ $44
0000 0000 s IO_RTC_H10:      equ $45 ; NOTE: Bits 0-1: hour, Bit 2: PM/AM, Bit 3: 0
0000 0000 s IO_RTC_D1:       equ $46
0000 0000 s IO_RTC_D10:      equ $47
0000 0000 s IO_RTC_MO1:      equ $48
0000 0000 s IO_RTC_MO10:     equ $49
0000 0000 s IO_RTC_Y1:       equ $4A
0000 0000 s IO_RTC_Y10:      equ $4B
0000 0000 s IO_RTC_W:        equ $4C
0000 0000 s IO_RTC_CD:       equ $4D
0000 0000 s IO_RTC_CE:       equ $4E
0000 0000 s IO_RTC_CF:       equ $4F
0000 0000 s 
0000 0000 s ; H10 bits
0000 0000 s BIT_RTC_PM_AM:      equ 2 ; 0=AM,  1=PM
0000 0000 s 
0000 0000 s ; CD bits
0000 0000 s BIT_RTC_HOLD:       equ 0
0000 0000 s BIT_RTC_BUSY:       equ 1 ; read-only
0000 0000 s BIT_RTC_IRQ_FLAG:   equ 2 ; write 0 to reset, write 1 to leave unaffected
0000 0000 s BIT_RTC_30_SEC_ADJ: equ 3
0000 0000 s 
0000 0000 s ; CE bits
0000 0000 s BIT_RTC_MASK:       equ 0
0000 0000 s BIT_RTC_ITRPT_STND: equ 1 ; 0=7.8125ms pulse,  1=as long as irq is set
0000 0000 s BIT_RTC_T0:         equ 2
0000 0000 s BIT_RTC_T1:         equ 3
0000 0000 s 
0000 0000 s ; CF bits
0000 0000 s BIT_RTC_REST:       equ 0
0000 0000 s BIT_RTC_STOP:       equ 1
0000 0000 s BIT_RTC_24_12:      equ 2 ; 0=12h-mode,  1=24h-mode
0000 0000 s BIT_RTC_TEST:       equ 3
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 f iomon.asm
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s ; terminal characters
0000 0000 s TERM_LF:     equ $0A ; linefeed
0000 0000 s TERM_CR:     equ $0D ; carriage return
0000 0000 s TERM_BS:     equ $08 ; backspace (used to move cursor left one char)
0000 0000 s TERM_DEL:    equ $7F ; delete
0000 0000 s TERM_NULL:   equ $00 ; null
0000 0000 s TERM_SPACE:  equ $20 ; space
0000 0000 s TERM_RUBOUT: equ $20 ; whatever character is not visible (space, del or whatever)
0000 0000 s 
0000 0000 s CONF_UART_BAUDRATE: equ 9600
0000 0000 s UART_DIV_VAL:  equ CPU_SPEED/CONF_UART_BAUDRATE - 1
0000 0000 s 
0000 0000 s 
0000 0000 d c33b00
0000 0000 s     jp main
0003 0003 s 
0003 0003 s     
0030 0030 s     org $0030   ; rst 30h  ($f7)
0030 0030 d c31401
0030 0030 s         jp fdc_isr
0033 0033 s 
0033 0033 s 
0033 0033 s 
0038 0038 s     org $0038   ; rst 38h  ($ff)
0038 0038 d c31f01
0038 0038 s         jp rtc_isr
003b 003b s 
003b 003b s 
003b 003b s 
003b 003b s main:
003b 003b d 210000
003b 003b s     ld HL, 0
003e 003e s _setup_loop:
003e 003e d 23
003e 003e s     inc HL
003f 003f d 7c
003f 003f s     ld A, H
0040 0040 d b5
0040 0040 s     or L
0041 0041 d c23e00
0041 0041 s     jp nz, _setup_loop
0044 0044 s 
0044 0044 d 21ffff
0044 0044 s     ld HL, RAM_END ; init stackpointer to end of memory
0047 0047 d f9
0047 0047 s     ld SP,HL
0048 0048 s 
0048 0048 d 210000
0048 0048 s     ld HL, $0000  ; catch any stack underflows
004b 004b d e5
004b 004b s     push HL
004c 004c s 
004c 004c s     ; init interrupt handlers
004c 004c d ed46
004c 004c s     im 0
004e 004e d 3ef7
004e 004e s     ld A, $f7
0050 0050 d d33c
0050 0050 s     out (IO_IVR_FDC), A
0052 0052 d 3eff
0052 0052 s     ld A, $ff
0054 0054 d d33d
0054 0054 s     out (IO_IVR_RTC), A
0056 0056 s 
0056 0056 d c39601
0056 0056 s     jp ioMon
0059 0059 s 
0059 0059 s 
0059 0059 s ;---------------CONIO-----------------
0059 0059 s 
0059 0059 s     include ../../mon/io_console.asm
0059 0059 f ../../mon/io_console.asm
0059 0059 s 
0059 0059 s ;-------------------------- CONSOLE IO --------------------------------
0059 0059 s 
0059 0059 s ; Prints the character stored in A. Trashes B.
0059 0059 s printChar:
0059 0059 s conout:
0059 0059 d 47
0059 0059 s     ld B, A
005a 005a s _printChar_wait:
005a 005a d db01
005a 005a s     in A, (IO_UART_COM) ; read in status byte of UART
005c 005c d e601
005c 005c s     and [1 << BIT_UART_TXRDY] ; mask out all bits except the TXRDY bit
005e 005e d ca5a00
005e 005e s     jp z, _printChar_wait ; do this until UART is ready
0061 0061 s     
0061 0061 s     ; UART is ready to send another byte now
0061 0061 d 78
0061 0061 s     ld A, B
0062 0062 d d300
0062 0062 s     out (IO_UART_DAT), A ; UART will start sending the byte now
0064 0064 s     
0064 0064 d c9
0064 0064 s     ret
0065 0065 s     
0065 0065 s     
0065 0065 s     
0065 0065 s ; Reads one character from the UART and stores it in A. The char is not echoed.
0065 0065 s ;  Blocking call. This method will wait until UART has received a byte
0065 0065 s readChar:
0065 0065 s conin:
0065 0065 d db01
0065 0065 s     in A, (IO_UART_COM) ; read in status byte of UART
0067 0067 d e602
0067 0067 s     and [1 << BIT_UART_RXRDY] ; mask out all bits except the RXRDY bit
0069 0069 d ca6500
0069 0069 s     jp z, readChar ; do this until UART has a valid byte
006c 006c s     
006c 006c d db00
006c 006c s     in A, (IO_UART_DAT) ; read in data byte
006e 006e s     
006e 006e d c9
006e 006e s     ret
006f 006f s     
006f 006f s 
006f 006f s 
006f 006f s ; Checks whether UART holds a character that is ready to be read.
006f 006f s ;  Sets A to $ff if char is available, $00 if not.
006f 006f s hasChar:
006f 006f s const:
006f 006f d db01
006f 006f s     in A, (IO_UART_COM) ; read in status byte of UART
0071 0071 d e602
0071 0071 s     and [1 << BIT_UART_RXRDY] ; mask out all bits except the RXRDY bit
0073 0073 d ca7900
0073 0073 s     jp z, _hasChar_no
0076 0076 d 3eff
0076 0076 s     ld A, $ff
0078 0078 d c9
0078 0078 s     ret
0079 0079 s _hasChar_no:
0079 0079 d af
0079 0079 s     xor A
007a 007a d c9
007a 007a s     ret
007b 007b s     
007b 007b s 
007b 007b s 
007b 007b s ; Prints all characters from (HL) to the next zero byte.
007b 007b s ;  Replaces all LFs ($0A) with CRLF ($0D, $0A)
007b 007b s printString:
007b 007b d 7e
007b 007b s     ld A, (HL) ; fetch byte
007c 007c d b7
007c 007c s     or A  ; compare with zero
007d 007d d c8
007d 007d s     ret Z ; if byte is zero, we are done
007e 007e s     
007e 007e d fe0a
007e 007e s     cp TERM_LF ; if byte is LF, we need to go to next line
0080 0080 d ca8a00
0080 0080 s     jp z, _printString_lf
0083 0083 s     
0083 0083 s     ; byte is neither zero not LF, so print it out
0083 0083 d cd5900
0083 0083 s     call printChar
0086 0086 s     
0086 0086 d 23
0086 0086 s     inc HL ; increment HL and loop
0087 0087 d c37b00
0087 0087 s     jp printString
008a 008a s     
008a 008a s _printString_lf:
008a 008a d cdd600
008a 008a s     call printNewLine ; use nl routine for portability
008d 008d d 23
008d 008d s     inc HL
008e 008e d c37b00
008e 008e s     jp printString
0091 0091 s     
0091 0091 s     
0091 0091 s     
0091 0091 s ; Reads characters from the UART and stores them in the location pointed by HL.
0091 0091 s ;  Reading continues until 255 characters have been read or a LF character is
0091 0091 s ;  found. CR also terminates the input. The amount of bytes read is stored in the 
0091 0091 s ;  C register. HL points to the first read byte after the call. The last byte of 
0091 0091 s ;  the string (not included in C) is set to 0. During reading, control characters like 
0091 0091 s ;  backspace are processed accordingly so the input resembles somewhat of a 
0091 0091 s ;  command prompt.
0091 0091 s readString:
0091 0091 d 0e01
0091 0091 s     ld C, 1 ; count one char more than actually read to account for terminator when looking for overflow
0093 0093 d e5
0093 0093 s     push HL ; save HL on stack
0094 0094 s _readString_loop:
0094 0094 d cd6500
0094 0094 s     call readChar
0097 0097 s     
0097 0097 d fe08
0097 0097 s     cp TERM_BS
0099 0099 d cab700
0099 0099 s     jp z, _readString_backspace
009c 009c d fe7f
009c 009c s     cp TERM_DEL
009e 009e d cab700
009e 009e s     jp z, _readString_backspace
00a1 00a1 d fe0a
00a1 00a1 s     cp TERM_LF
00a3 00a3 d cad100
00a3 00a3 s     jp z, _readString_end ; LF means we are done
00a6 00a6 d fe0d
00a6 00a6 s     cp TERM_CR
00a8 00a8 d cad100
00a8 00a8 s     jp z, _readString_end ; CR means the same
00ab 00ab s     
00ab 00ab d cd5900
00ab 00ab s     call printChar ; echo the entered character
00ae 00ae s     
00ae 00ae d 77
00ae 00ae s     ld (HL), A
00af 00af s     
00af 00af d 23
00af 00af s     inc HL
00b0 00b0 d 0c
00b0 00b0 s     inc C
00b1 00b1 d cad100
00b1 00b1 s     jp z, _readString_end ; return if C has flown over (255 chars read)
00b4 00b4 s     
00b4 00b4 d c39400
00b4 00b4 s     jp _readString_loop
00b7 00b7 s 
00b7 00b7 s _readString_backspace:
00b7 00b7 d 79
00b7 00b7 s     ld A, C
00b8 00b8 d fe01
00b8 00b8 s     cp 1 ; important! we have one more char in c than actually read!
00ba 00ba d ca9400
00ba 00ba s     jp z, _readString_loop ; nothing to delete. get on with it.
00bd 00bd s     
00bd 00bd s     ; TODO: Do this with string. takes less calls and loads
00bd 00bd d 3e08
00bd 00bd s     ld A, TERM_BS
00bf 00bf d cd5900
00bf 00bf s     call printChar ; echo the BS to move cursor back one char...
00c2 00c2 d 3e20
00c2 00c2 s     ld A, TERM_RUBOUT
00c4 00c4 d cd5900
00c4 00c4 s     call printChar ; overwrite the last entered char with rubout character...
00c7 00c7 d 3e08
00c7 00c7 s     ld A, TERM_BS
00c9 00c9 d cd5900
00c9 00c9 s     call printChar ; and place cursor over the rubout char again
00cc 00cc s     
00cc 00cc d 0d
00cc 00cc s     dec C ; buffer minus one
00cd 00cd d 2b
00cd 00cd s     dec HL
00ce 00ce s     
00ce 00ce d c39400
00ce 00ce s     jp _readString_loop ; back to loop
00d1 00d1 s     
00d1 00d1 s _readString_end:
00d1 00d1 d 0d
00d1 00d1 s     dec C ; remove the additional char
00d2 00d2 d 3600
00d2 00d2 s     ld (HL),0 ; insert null terminator
00d4 00d4 d e1
00d4 00d4 s     pop HL ; move HL back to start of buffer
00d5 00d5 d c9
00d5 00d5 s     ret
00d6 00d6 s 
00d6 00d6 s     
00d6 00d6 s     
00d6 00d6 s ; Prints CRLF characters
00d6 00d6 s printNewLine:
00d6 00d6 d 3e0a
00d6 00d6 s     ld A, $0A
00d8 00d8 d cd5900
00d8 00d8 s     call printChar
00db 00db d 3e0d
00db 00db s     ld A, $0D
00dd 00dd d cd5900
00dd 00dd s     call printChar
00e0 00e0 d c9
00e0 00e0 s     ret
00e1 00e1 s 
00e1 00e1 s    
00e1 00e1 s 
00e1 00e1 s ; Clears the screen
00e1 00e1 s clearScreen:
00e1 00e1 d 210f01
00e1 00e1 s     ld HL, str_cls
00e4 00e4 d cd7b00
00e4 00e4 s     call printString
00e7 00e7 d c9
00e7 00e7 s     ret
00e8 00e8 s 
00e8 00e8 f iomon.asm
00e8 00e8 s 
00e8 00e8 s 
00e8 00e8 s 
00e8 00e8 s ;--------------STRINGS----------------
00e8 00e8 s 
00e8 00e8 s str_fdcInt:
00e8 00e8 d 5b46444320494e545d0a00
00e8 00e8 s     db '[FDC INT]', $0A, $00
00f3 00f3 s 
00f3 00f3 s str_rtcInt:
00f3 00f3 d 5b52544320494e545d0a00
00f3 00f3 s     db '[RTC INT]', $0A, $00
00fe 00fe s 
00fe 00fe s str_invalidCommand:
00fe 00fe d 494e56414c494420434f4d4d414e440a00
00fe 00fe s     db 'INVALID COMMAND', $0A, $00
010f 010f s 
010f 010f s str_cls:
010f 010f d 1b5b324a00
010f 010f s     db $1B, '[2J', $00 ; the VT100 way to clear screen
0114 0114 s 
0114 0114 s 
0114 0114 s ;--------------ISRs-----------------
0114 0114 s 
0114 0114 s fdc_isr:
0114 0114 d 08
0114 0114 s     ex AF, AF'
0115 0115 d d9
0115 0115 s     exx
0116 0116 s 
0116 0116 d 21e800
0116 0116 s     ld HL, str_fdcInt
0119 0119 d cd7b00
0119 0119 s     call printString
011c 011c s 
011c 011c d d9
011c 011c s     exx
011d 011d d 08
011d 011d s     ex AF, AF'
011e 011e d c9
011e 011e s     ret
011f 011f s 
011f 011f s 
011f 011f s 
011f 011f s rtc_isr:
011f 011f d 08
011f 011f s     ex AF, AF'
0120 0120 d d9
0120 0120 s     exx
0121 0121 s 
0121 0121 d 21f300
0121 0121 s     ld HL, str_rtcInt
0124 0124 d cd7b00
0124 0124 s     call printString
0127 0127 s 
0127 0127 d d9
0127 0127 s     exx
0128 0128 d 08
0128 0128 s     ex AF, AF'
0129 0129 d c9
0129 0129 s     ret
012a 012a s 
012a 012a s 
012a 012a s ;-------------FORMATTERS------------
012a 012a s 
012a 012a s ; Prints the byte stored in A in uppercase hexadecimal format.
012a 012a s ;  Taken from Alexis Kotlowys monitor because I'm lazy. Man, this guy really hasn't many comments to spare.
012a 012a s printHex:
012a 012a d f5
012a 012a s     push af
012b 012b d e6f0
012b 012b s     and $f0
012d 012d d 0f
012d 012d s     rrca
012e 012e d 0f
012e 012e s     rrca
012f 012f d 0f
012f 012f s     rrca
0130 0130 d 0f
0130 0130 s     rrca
0131 0131 d cd3501
0131 0131 s     call _printHex_1
0134 0134 d f1
0134 0134 s     pop af
0135 0135 s _printHex_1:
0135 0135 d e60f
0135 0135 s     and $0f
0137 0137 d fe0a
0137 0137 s     cp $0a
0139 0139 d da4301
0139 0139 s     jp c, _printHex_2
013c 013c d d609
013c 013c s     sub $09
013e 013e d f640
013e 013e s     or $40
0140 0140 d c34501
0140 0140 s     jp _printHex_3
0143 0143 s _printHex_2:
0143 0143 d f630
0143 0143 s     or $30
0145 0145 s _printHex_3:
0145 0145 d cd5900
0145 0145 s     call printChar
0148 0148 d c9
0148 0148 s     ret
0149 0149 s 
0149 0149 s 
0149 0149 s 
0149 0149 s parseHex:
0149 0149 d fe30
0149 0149 s     cp $30
014b 014b d fa5601
014b 014b s     jp m, _parseHex_noDigit ; char is < '0'
014e 014e d fe3a
014e 014e s     cp $3A
0150 0150 d f25601
0150 0150 s     jp p, _parseHex_noDigit ; char is > '9' 
0153 0153 s     ; char is a digit
0153 0153 d d630
0153 0153 s     sub '0' ; subtract the value of '0'. hex value is now stored in A
0155 0155 d c9
0155 0155 s     ret
0156 0156 s     
0156 0156 s _parseHex_noDigit:
0156 0156 d fe61
0156 0156 s     cp 'a'
0158 0158 d fa6301
0158 0158 s     jp m, _parseHex_noLC ; char is < 'a'
015b 015b d fe67
015b 015b s     cp 'g'
015d 015d d f26301
015d 015d s     jp p, _parseHex_noLC; char is > 'f'
0160 0160 s     ; char is a lowercase hex letter
0160 0160 d d657
0160 0160 s     sub 'a' - $0a ; subtract the value of 'a' and add $0a (as a means $0a)
0162 0162 d c9
0162 0162 s     ret
0163 0163 s     
0163 0163 s _parseHex_noLC:
0163 0163 d fe41
0163 0163 s     cp 'A'
0165 0165 d fa7001
0165 0165 s     jp m, _parse_error ; char is < 'A'
0168 0168 d fe47
0168 0168 s     cp 'G'
016a 016a d f27001
016a 016a s     jp p, _parse_error ; char is > 'F'
016d 016d s     ; char is an uppercase hex letter
016d 016d d d637
016d 016d s     sub 'A' - $0a  ; subtract the value of 'A' and add $0a (as A means $0a)
016f 016f d c9
016f 016f s     ret
0170 0170 s     
0170 0170 s _parse_error:
0170 0170 d 3eff
0170 0170 s     ld A, $FF
0172 0172 d c9
0172 0172 s     ret
0173 0173 s 
0173 0173 s 
0173 0173 s 
0173 0173 s parseByte:
0173 0173 d 7e
0173 0173 s     ld A, (HL)
0174 0174 d 23
0174 0174 s     inc HL
0175 0175 d 0d
0175 0175 s     dec C
0176 0176 d cd4901
0176 0176 s     call parseHex
0179 0179 d 47
0179 0179 s     ld B, A
017a 017a s 
017a 017a d 79
017a 017a s     ld A, C
017b 017b d b7
017b 017b s     or A
017c 017c d ca8b01
017c 017c s     jp z, _parseByte_noByteLeft
017f 017f s 
017f 017f d 78
017f 017f s     ld A, B
0180 0180 d 07
0180 0180 s     rlca
0181 0181 d 07
0181 0181 s     rlca
0182 0182 d 07
0182 0182 s     rlca
0183 0183 d 07
0183 0183 s     rlca
0184 0184 d 47
0184 0184 s     ld B, A
0185 0185 s 
0185 0185 d 7e
0185 0185 s     ld A, (HL)
0186 0186 d 23
0186 0186 s     inc HL
0187 0187 d 0d
0187 0187 s     dec C
0188 0188 d cd4901
0188 0188 s     call parseHex
018b 018b s _parseByte_noByteLeft:
018b 018b d 80
018b 018b s     add B
018c 018c d c9
018c 018c s     ret
018d 018d s 
018d 018d s 
018d 018d s 
018d 018d s ; increments HL and decrements C while (HL) is a whitespace character
018d 018d s skipWhites:
018d 018d d 7e
018d 018d s     ld A,(HL)
018e 018e d fe20
018e 018e s     cp TERM_SPACE ; check if char is == SPACE
0190 0190 d c0
0190 0190 s     ret nz
0191 0191 s     ;char was == SPACE -> skip char
0191 0191 d 23
0191 0191 s     inc HL
0192 0192 d 0d
0192 0192 s     dec C
0193 0193 d c38d01
0193 0193 s     jp skipWhites
0196 0196 s 
0196 0196 s 
0196 0196 s ;-------------MAIN-------------------
0196 0196 s 
0196 0196 s 
0196 0196 s ioMon:
0196 0196 s     ; initialize TCCR and perform an IO-RESET before initializing peripherals
0196 0196 d 3e02
0196 0196 s     ld A, [1 << BIT_TCCR_IO_RESET]; set only IO-RESET bit to one
0198 0198 d d320
0198 0198 s     out (IO_TCCR),A
019a 019a d 00
019a 019a s     nop ; keep the IO-RESET line high for at least 8 clock pulses ( = 2 NOPs)
019b 019b d 00
019b 019b s     nop
019c 019c d af
019c 019c s     xor A ; clear all TCCR bits, including IO-RESET bit
019d 019d d d320
019d 019d s     out (IO_TCCR),A
019f 019f s     ; TCCR is now initialized and IO-Devices are reset
019f 019f s     
019f 019f s     ; PIT 2 is connected to UART, so set it up for baud rate generation
019f 019f d 3eb6
019f 019f s     ld A, $B6 ; %10110110  ; set counter 2 in mode 3, binary counting
01a1 01a1 d d313
01a1 01a1 s     out (IO_PIT_CTRL), A
01a3 01a3 s     ; write divider value to counter (first LSB, then MSB as set in command above)
01a3 01a3 d 3eff
01a3 01a3 s     ld A, low UART_DIV_VAL
01a5 01a5 d d312
01a5 01a5 s     out (IO_PIT_C2), A
01a7 01a7 d 3e00
01a7 01a7 s     ld A, high UART_DIV_VAL
01a9 01a9 d d312
01a9 01a9 s     out (IO_PIT_C2), A
01ab 01ab s     ; registers for counter are set. now we can gate the counter
01ab 01ab d db20
01ab 01ab s     in A,(IO_TCCR)
01ad 01ad d e63d
01ad 01ad s     and IO_TCCR_WRITE_MASK ; mask out all the bits that are not readable
01af 01af d f610
01af 01af s     or [1 << BIT_TCCR_C2_GATE]
01b1 01b1 d d320
01b1 01b1 s     out (IO_TCCR), A ; C2 is now counting
01b3 01b3 s     
01b3 01b3 s     ; write mode byte to UART (first command byte after reset)
01b3 01b3 d 3e4d
01b3 01b3 s     ld A, $4D  ; 1x mode, 8N1
01b5 01b5 d d301
01b5 01b5 s     out (IO_UART_COM), A 
01b7 01b7 s     ; enable receiver and transmitter.
01b7 01b7 s     ;  also, set /DTR of UART to 1. Indicator LED should turn off, giving visual feedback that CPU is alive
01b7 01b7 d 3e07
01b7 01b7 s     ld A, [(1 << BIT_UART_TXEN) | (1 << BIT_UART_RXEN) | (1 << BIT_UART_DTR)]
01b9 01b9 d d301
01b9 01b9 s     out (IO_UART_COM), A
01bb 01bb s 
01bb 01bb s 
01bb 01bb s 
01bb 01bb s prompt:
01bb 01bb d cdd600
01bb 01bb s     call printNewLine
01be 01be d 3e3e
01be 01be s     ld A, '>' ; print input prompt
01c0 01c0 d cd5900
01c0 01c0 s     call printChar
01c3 01c3 s     
01c3 01c3 d 210120
01c3 01c3 s     ld HL, DAT_INPUT_BUFFER ; this is where we want to store the read bytes
01c6 01c6 d cd9100
01c6 01c6 s     call readString ; read user input
01c9 01c9 s     
01c9 01c9 d 79
01c9 01c9 s     ld A, C 
01ca 01ca d b7
01ca 01ca s     or A
01cb 01cb d cabb01
01cb 01cb s     jp z, prompt  ; user entered nothing. prompt again
01ce 01ce s     
01ce 01ce d cdd600
01ce 01ce s     call printNewLine ; insert a new line after user entered a command
01d1 01d1 s 
01d1 01d1 d cd8d01
01d1 01d1 s     call skipWhites ; skip whitespace at beginning of command
01d4 01d4 s 
01d4 01d4 s proc_loop: 
01d4 01d4 s     ; process user input
01d4 01d4 d 46
01d4 01d4 s     ld B, (HL) ; load fist byte entered
01d5 01d5 d 23
01d5 01d5 s     inc HL ; move HL to next byte
01d6 01d6 d 0d
01d6 01d6 s     dec C
01d7 01d7 s     
01d7 01d7 d cd8d01
01d7 01d7 s     call skipWhites
01da 01da s     
01da 01da d 78
01da 01da s     ld A, B
01db 01db s     
01db 01db s     ; determine entered command
01db 01db d fe69
01db 01db s     cp 'i'
01dd 01dd d ca0802
01dd 01dd s     jp z, command_in
01e0 01e0 s     
01e0 01e0 d fe6f
01e0 01e0 s     cp 'o'
01e2 01e2 d ca1f02
01e2 01e2 s     jp z, command_out
01e5 01e5 s     
01e5 01e5 d fe70
01e5 01e5 s     cp 'p'
01e7 01e7 d ca3a02
01e7 01e7 s     jp z, command_port
01ea 01ea s     
01ea 01ea d fe5f
01ea 01ea s     cp '_'
01ec 01ec d ca5102
01ec 01ec s     jp z, command_ei
01ef 01ef s 
01ef 01ef d fe7c
01ef 01ef s     cp '|'
01f1 01f1 d ca5502
01f1 01f1 s     jp z, command_di
01f4 01f4 s 
01f4 01f4 d 21fe00
01f4 01f4 s     ld HL, str_invalidCommand
01f7 01f7 d cd7b00
01f7 01f7 s     call printString
01fa 01fa d c3bb01
01fa 01fa s     jp prompt
01fd 01fd s 
01fd 01fd s proc_end:
01fd 01fd d cd8d01
01fd 01fd s     call skipWhites
0200 0200 d 79
0200 0200 s     ld A, C 
0201 0201 d b7
0201 0201 s     or A
0202 0202 d c2d401
0202 0202 s     jp nz, proc_loop  ; still stuff left to process
0205 0205 d c3bb01
0205 0205 s     jp prompt
0208 0208 s 
0208 0208 s 
0208 0208 s 
0208 0208 s command_in:
0208 0208 d 41
0208 0208 s     ld B, C  ; stash C
0209 0209 d 3a0020
0209 0209 s     ld A, (DAT_CURRENT_PORT)
020c 020c d 4f
020c 020c s     ld C, A
020d 020d d ed50
020d 020d s     in D, (C)
020f 020f d 48
020f 020f s     ld C, B  ; restore C
0210 0210 d 3e69
0210 0210 s     ld A, 'i'
0212 0212 d cd5900
0212 0212 s     call printChar
0215 0215 d 7a
0215 0215 s     ld A, D
0216 0216 d cd2a01
0216 0216 s     call printHex
0219 0219 d cdd600
0219 0219 s     call printNewLine
021c 021c d c3fd01
021c 021c s     jp proc_end
021f 021f s 
021f 021f s command_out:
021f 021f d cd7301
021f 021f s     call parseByte
0222 0222 d 57
0222 0222 s     ld D, A 
0223 0223 d 41
0223 0223 s     ld B, C  ; stash C
0224 0224 d 3a0020
0224 0224 s     ld A, (DAT_CURRENT_PORT)
0227 0227 d 4f
0227 0227 s     ld C, A
0228 0228 d ed51
0228 0228 s     out (C), D
022a 022a d 48
022a 022a s     ld C, B  ; restore C
022b 022b d 3e6f
022b 022b s     ld A, 'o'
022d 022d d cd5900
022d 022d s     call printChar
0230 0230 d 7a
0230 0230 s     ld A, D
0231 0231 d cd2a01
0231 0231 s     call printHex
0234 0234 d cdd600
0234 0234 s     call printNewLine
0237 0237 d c3fd01
0237 0237 s     jp proc_end
023a 023a s 
023a 023a s command_port:
023a 023a d cd7301
023a 023a s     call parseByte
023d 023d d 320020
023d 023d s     ld (DAT_CURRENT_PORT), A
0240 0240 d 3e70
0240 0240 s     ld A, 'p'
0242 0242 d cd5900
0242 0242 s     call printChar
0245 0245 d 3a0020
0245 0245 s     ld A, (DAT_CURRENT_PORT)
0248 0248 d cd2a01
0248 0248 s     call printHex
024b 024b d cdd600
024b 024b s     call printNewLine
024e 024e d c3fd01
024e 024e s     jp proc_end
0251 0251 s 
0251 0251 s command_ei:
0251 0251 d fb
0251 0251 s     ei
0252 0252 d c3fd01
0252 0252 s     jp proc_end
0255 0255 s 
0255 0255 s command_di:
0255 0255 d f3
0255 0255 s     di
0256 0256 d c3fd01
0256 0256 s     jp proc_end
0259 0259 s     
0259 0259 s 
0259 0259 s     
0259 0259 s 
0259 0259 s 
0259 0259 s mon_end:
0259 0259 s     
0259 0259 s     ; pad out file for maximum rom size
0259 0259 s     dc [8192 - mon_end], $ff
0259 0259 d ffffffffffffffffffffffffffffffff
0269 0269 d ffffffffffffffffffffffffffffffff
0279 0279 d ffffffffffffffffffffffffffffffff
0289 0289 d ffffffffffffffffffffffffffffffff
0299 0299 d ffffffffffffffffffffffffffffffff
02a9 02a9 d ffffffffffffffffffffffffffffffff
02b9 02b9 d ffffffffffffffffffffffffffffffff
02c9 02c9 d ffffffffffffffffffffffffffffffff
02d9 02d9 d ffffffffffffffffffffffffffffffff
02e9 02e9 d ffffffffffffffffffffffffffffffff
02f9 02f9 d ffffffffffffffffffffffffffffffff
0309 0309 d ffffffffffffffffffffffffffffffff
0319 0319 d ffffffffffffffffffffffffffffffff
0329 0329 d ffffffffffffffffffffffffffffffff
0339 0339 d ffffffffffffffffffffffffffffffff
0349 0349 d ffffffffffffffffffffffffffffffff
0359 0359 d ffffffffffffffffffffffffffffffff
0369 0369 d ffffffffffffffffffffffffffffffff
0379 0379 d ffffffffffffffffffffffffffffffff
0389 0389 d ffffffffffffffffffffffffffffffff
0399 0399 d ffffffffffffffffffffffffffffffff
03a9 03a9 d ffffffffffffffffffffffffffffffff
03b9 03b9 d ffffffffffffffffffffffffffffffff
03c9 03c9 d ffffffffffffffffffffffffffffffff
03d9 03d9 d ffffffffffffffffffffffffffffffff
03e9 03e9 d ffffffffffffffffffffffffffffffff
03f9 03f9 d ffffffffffffffffffffffffffffffff
0409 0409 d ffffffffffffffffffffffffffffffff
0419 0419 d ffffffffffffffffffffffffffffffff
0429 0429 d ffffffffffffffffffffffffffffffff
0439 0439 d ffffffffffffffffffffffffffffffff
0449 0449 d ffffffffffffffffffffffffffffffff
0459 0459 d ffffffffffffffffffffffffffffffff
0469 0469 d ffffffffffffffffffffffffffffffff
0479 0479 d ffffffffffffffffffffffffffffffff
0489 0489 d ffffffffffffffffffffffffffffffff
0499 0499 d ffffffffffffffffffffffffffffffff
04a9 04a9 d ffffffffffffffffffffffffffffffff
04b9 04b9 d ffffffffffffffffffffffffffffffff
04c9 04c9 d ffffffffffffffffffffffffffffffff
04d9 04d9 d ffffffffffffffffffffffffffffffff
04e9 04e9 d ffffffffffffffffffffffffffffffff
04f9 04f9 d ffffffffffffffffffffffffffffffff
0509 0509 d ffffffffffffffffffffffffffffffff
0519 0519 d ffffffffffffffffffffffffffffffff
0529 0529 d ffffffffffffffffffffffffffffffff
0539 0539 d ffffffffffffffffffffffffffffffff
0549 0549 d ffffffffffffffffffffffffffffffff
0559 0559 d ffffffffffffffffffffffffffffffff
0569 0569 d ffffffffffffffffffffffffffffffff
0579 0579 d ffffffffffffffffffffffffffffffff
0589 0589 d ffffffffffffffffffffffffffffffff
0599 0599 d ffffffffffffffffffffffffffffffff
05a9 05a9 d ffffffffffffffffffffffffffffffff
05b9 05b9 d ffffffffffffffffffffffffffffffff
05c9 05c9 d ffffffffffffffffffffffffffffffff
05d9 05d9 d ffffffffffffffffffffffffffffffff
05e9 05e9 d ffffffffffffffffffffffffffffffff
05f9 05f9 d ffffffffffffffffffffffffffffffff
0609 0609 d ffffffffffffffffffffffffffffffff
0619 0619 d ffffffffffffffffffffffffffffffff
0629 0629 d ffffffffffffffffffffffffffffffff
0639 0639 d ffffffffffffffffffffffffffffffff
0649 0649 d ffffffffffffffffffffffffffffffff
0659 0659 d ffffffffffffffffffffffffffffffff
0669 0669 d ffffffffffffffffffffffffffffffff
0679 0679 d ffffffffffffffffffffffffffffffff
0689 0689 d ffffffffffffffffffffffffffffffff
0699 0699 d ffffffffffffffffffffffffffffffff
06a9 06a9 d ffffffffffffffffffffffffffffffff
06b9 06b9 d ffffffffffffffffffffffffffffffff
06c9 06c9 d ffffffffffffffffffffffffffffffff
06d9 06d9 d ffffffffffffffffffffffffffffffff
06e9 06e9 d ffffffffffffffffffffffffffffffff
06f9 06f9 d ffffffffffffffffffffffffffffffff
0709 0709 d ffffffffffffffffffffffffffffffff
0719 0719 d ffffffffffffffffffffffffffffffff
0729 0729 d ffffffffffffffffffffffffffffffff
0739 0739 d ffffffffffffffffffffffffffffffff
0749 0749 d ffffffffffffffffffffffffffffffff
0759 0759 d ffffffffffffffffffffffffffffffff
0769 0769 d ffffffffffffffffffffffffffffffff
0779 0779 d ffffffffffffffffffffffffffffffff
0789 0789 d ffffffffffffffffffffffffffffffff
0799 0799 d ffffffffffffffffffffffffffffffff
07a9 07a9 d ffffffffffffffffffffffffffffffff
07b9 07b9 d ffffffffffffffffffffffffffffffff
07c9 07c9 d ffffffffffffffffffffffffffffffff
07d9 07d9 d ffffffffffffffffffffffffffffffff
07e9 07e9 d ffffffffffffffffffffffffffffffff
07f9 07f9 d ffffffffffffffffffffffffffffffff
0809 0809 d ffffffffffffffffffffffffffffffff
0819 0819 d ffffffffffffffffffffffffffffffff
0829 0829 d ffffffffffffffffffffffffffffffff
0839 0839 d ffffffffffffffffffffffffffffffff
0849 0849 d ffffffffffffffffffffffffffffffff
0859 0859 d ffffffffffffffffffffffffffffffff
0869 0869 d ffffffffffffffffffffffffffffffff
0879 0879 d ffffffffffffffffffffffffffffffff
0889 0889 d ffffffffffffffffffffffffffffffff
0899 0899 d ffffffffffffffffffffffffffffffff
08a9 08a9 d ffffffffffffffffffffffffffffffff
08b9 08b9 d ffffffffffffffffffffffffffffffff
08c9 08c9 d ffffffffffffffffffffffffffffffff
08d9 08d9 d ffffffffffffffffffffffffffffffff
08e9 08e9 d ffffffffffffffffffffffffffffffff
08f9 08f9 d ffffffffffffffffffffffffffffffff
0909 0909 d ffffffffffffffffffffffffffffffff
0919 0919 d ffffffffffffffffffffffffffffffff
0929 0929 d ffffffffffffffffffffffffffffffff
0939 0939 d ffffffffffffffffffffffffffffffff
0949 0949 d ffffffffffffffffffffffffffffffff
0959 0959 d ffffffffffffffffffffffffffffffff
0969 0969 d ffffffffffffffffffffffffffffffff
0979 0979 d ffffffffffffffffffffffffffffffff
0989 0989 d ffffffffffffffffffffffffffffffff
0999 0999 d ffffffffffffffffffffffffffffffff
09a9 09a9 d ffffffffffffffffffffffffffffffff
09b9 09b9 d ffffffffffffffffffffffffffffffff
09c9 09c9 d ffffffffffffffffffffffffffffffff
09d9 09d9 d ffffffffffffffffffffffffffffffff
09e9 09e9 d ffffffffffffffffffffffffffffffff
09f9 09f9 d ffffffffffffffffffffffffffffffff
0a09 0a09 d ffffffffffffffffffffffffffffffff
0a19 0a19 d ffffffffffffffffffffffffffffffff
0a29 0a29 d ffffffffffffffffffffffffffffffff
0a39 0a39 d ffffffffffffffffffffffffffffffff
0a49 0a49 d ffffffffffffffffffffffffffffffff
0a59 0a59 d ffffffffffffffffffffffffffffffff
0a69 0a69 d ffffffffffffffffffffffffffffffff
0a79 0a79 d ffffffffffffffffffffffffffffffff
0a89 0a89 d ffffffffffffffffffffffffffffffff
0a99 0a99 d ffffffffffffffffffffffffffffffff
0aa9 0aa9 d ffffffffffffffffffffffffffffffff
0ab9 0ab9 d ffffffffffffffffffffffffffffffff
0ac9 0ac9 d ffffffffffffffffffffffffffffffff
0ad9 0ad9 d ffffffffffffffffffffffffffffffff
0ae9 0ae9 d ffffffffffffffffffffffffffffffff
0af9 0af9 d ffffffffffffffffffffffffffffffff
0b09 0b09 d ffffffffffffffffffffffffffffffff
0b19 0b19 d ffffffffffffffffffffffffffffffff
0b29 0b29 d ffffffffffffffffffffffffffffffff
0b39 0b39 d ffffffffffffffffffffffffffffffff
0b49 0b49 d ffffffffffffffffffffffffffffffff
0b59 0b59 d ffffffffffffffffffffffffffffffff
0b69 0b69 d ffffffffffffffffffffffffffffffff
0b79 0b79 d ffffffffffffffffffffffffffffffff
0b89 0b89 d ffffffffffffffffffffffffffffffff
0b99 0b99 d ffffffffffffffffffffffffffffffff
0ba9 0ba9 d ffffffffffffffffffffffffffffffff
0bb9 0bb9 d ffffffffffffffffffffffffffffffff
0bc9 0bc9 d ffffffffffffffffffffffffffffffff
0bd9 0bd9 d ffffffffffffffffffffffffffffffff
0be9 0be9 d ffffffffffffffffffffffffffffffff
0bf9 0bf9 d ffffffffffffffffffffffffffffffff
0c09 0c09 d ffffffffffffffffffffffffffffffff
0c19 0c19 d ffffffffffffffffffffffffffffffff
0c29 0c29 d ffffffffffffffffffffffffffffffff
0c39 0c39 d ffffffffffffffffffffffffffffffff
0c49 0c49 d ffffffffffffffffffffffffffffffff
0c59 0c59 d ffffffffffffffffffffffffffffffff
0c69 0c69 d ffffffffffffffffffffffffffffffff
0c79 0c79 d ffffffffffffffffffffffffffffffff
0c89 0c89 d ffffffffffffffffffffffffffffffff
0c99 0c99 d ffffffffffffffffffffffffffffffff
0ca9 0ca9 d ffffffffffffffffffffffffffffffff
0cb9 0cb9 d ffffffffffffffffffffffffffffffff
0cc9 0cc9 d ffffffffffffffffffffffffffffffff
0cd9 0cd9 d ffffffffffffffffffffffffffffffff
0ce9 0ce9 d ffffffffffffffffffffffffffffffff
0cf9 0cf9 d ffffffffffffffffffffffffffffffff
0d09 0d09 d ffffffffffffffffffffffffffffffff
0d19 0d19 d ffffffffffffffffffffffffffffffff
0d29 0d29 d ffffffffffffffffffffffffffffffff
0d39 0d39 d ffffffffffffffffffffffffffffffff
0d49 0d49 d ffffffffffffffffffffffffffffffff
0d59 0d59 d ffffffffffffffffffffffffffffffff
0d69 0d69 d ffffffffffffffffffffffffffffffff
0d79 0d79 d ffffffffffffffffffffffffffffffff
0d89 0d89 d ffffffffffffffffffffffffffffffff
0d99 0d99 d ffffffffffffffffffffffffffffffff
0da9 0da9 d ffffffffffffffffffffffffffffffff
0db9 0db9 d ffffffffffffffffffffffffffffffff
0dc9 0dc9 d ffffffffffffffffffffffffffffffff
0dd9 0dd9 d ffffffffffffffffffffffffffffffff
0de9 0de9 d ffffffffffffffffffffffffffffffff
0df9 0df9 d ffffffffffffffffffffffffffffffff
0e09 0e09 d ffffffffffffffffffffffffffffffff
0e19 0e19 d ffffffffffffffffffffffffffffffff
0e29 0e29 d ffffffffffffffffffffffffffffffff
0e39 0e39 d ffffffffffffffffffffffffffffffff
0e49 0e49 d ffffffffffffffffffffffffffffffff
0e59 0e59 d ffffffffffffffffffffffffffffffff
0e69 0e69 d ffffffffffffffffffffffffffffffff
0e79 0e79 d ffffffffffffffffffffffffffffffff
0e89 0e89 d ffffffffffffffffffffffffffffffff
0e99 0e99 d ffffffffffffffffffffffffffffffff
0ea9 0ea9 d ffffffffffffffffffffffffffffffff
0eb9 0eb9 d ffffffffffffffffffffffffffffffff
0ec9 0ec9 d ffffffffffffffffffffffffffffffff
0ed9 0ed9 d ffffffffffffffffffffffffffffffff
0ee9 0ee9 d ffffffffffffffffffffffffffffffff
0ef9 0ef9 d ffffffffffffffffffffffffffffffff
0f09 0f09 d ffffffffffffffffffffffffffffffff
0f19 0f19 d ffffffffffffffffffffffffffffffff
0f29 0f29 d ffffffffffffffffffffffffffffffff
0f39 0f39 d ffffffffffffffffffffffffffffffff
0f49 0f49 d ffffffffffffffffffffffffffffffff
0f59 0f59 d ffffffffffffffffffffffffffffffff
0f69 0f69 d ffffffffffffffffffffffffffffffff
0f79 0f79 d ffffffffffffffffffffffffffffffff
0f89 0f89 d ffffffffffffffffffffffffffffffff
0f99 0f99 d ffffffffffffffffffffffffffffffff
0fa9 0fa9 d ffffffffffffffffffffffffffffffff
0fb9 0fb9 d ffffffffffffffffffffffffffffffff
0fc9 0fc9 d ffffffffffffffffffffffffffffffff
0fd9 0fd9 d ffffffffffffffffffffffffffffffff
0fe9 0fe9 d ffffffffffffffffffffffffffffffff
0ff9 0ff9 d ffffffffffffffffffffffffffffffff
1009 1009 d ffffffffffffffffffffffffffffffff
1019 1019 d ffffffffffffffffffffffffffffffff
1029 1029 d ffffffffffffffffffffffffffffffff
1039 1039 d ffffffffffffffffffffffffffffffff
1049 1049 d ffffffffffffffffffffffffffffffff
1059 1059 d ffffffffffffffffffffffffffffffff
1069 1069 d ffffffffffffffffffffffffffffffff
1079 1079 d ffffffffffffffffffffffffffffffff
1089 1089 d ffffffffffffffffffffffffffffffff
1099 1099 d ffffffffffffffffffffffffffffffff
10a9 10a9 d ffffffffffffffffffffffffffffffff
10b9 10b9 d ffffffffffffffffffffffffffffffff
10c9 10c9 d ffffffffffffffffffffffffffffffff
10d9 10d9 d ffffffffffffffffffffffffffffffff
10e9 10e9 d ffffffffffffffffffffffffffffffff
10f9 10f9 d ffffffffffffffffffffffffffffffff
1109 1109 d ffffffffffffffffffffffffffffffff
1119 1119 d ffffffffffffffffffffffffffffffff
1129 1129 d ffffffffffffffffffffffffffffffff
1139 1139 d ffffffffffffffffffffffffffffffff
1149 1149 d ffffffffffffffffffffffffffffffff
1159 1159 d ffffffffffffffffffffffffffffffff
1169 1169 d ffffffffffffffffffffffffffffffff
1179 1179 d ffffffffffffffffffffffffffffffff
1189 1189 d ffffffffffffffffffffffffffffffff
1199 1199 d ffffffffffffffffffffffffffffffff
11a9 11a9 d ffffffffffffffffffffffffffffffff
11b9 11b9 d ffffffffffffffffffffffffffffffff
11c9 11c9 d ffffffffffffffffffffffffffffffff
11d9 11d9 d ffffffffffffffffffffffffffffffff
11e9 11e9 d ffffffffffffffffffffffffffffffff
11f9 11f9 d ffffffffffffffffffffffffffffffff
1209 1209 d ffffffffffffffffffffffffffffffff
1219 1219 d ffffffffffffffffffffffffffffffff
1229 1229 d ffffffffffffffffffffffffffffffff
1239 1239 d ffffffffffffffffffffffffffffffff
1249 1249 d ffffffffffffffffffffffffffffffff
1259 1259 d ffffffffffffffffffffffffffffffff
1269 1269 d ffffffffffffffffffffffffffffffff
1279 1279 d ffffffffffffffffffffffffffffffff
1289 1289 d ffffffffffffffffffffffffffffffff
1299 1299 d ffffffffffffffffffffffffffffffff
12a9 12a9 d ffffffffffffffffffffffffffffffff
12b9 12b9 d ffffffffffffffffffffffffffffffff
12c9 12c9 d ffffffffffffffffffffffffffffffff
12d9 12d9 d ffffffffffffffffffffffffffffffff
12e9 12e9 d ffffffffffffffffffffffffffffffff
12f9 12f9 d ffffffffffffffffffffffffffffffff
1309 1309 d ffffffffffffffffffffffffffffffff
1319 1319 d ffffffffffffffffffffffffffffffff
1329 1329 d ffffffffffffffffffffffffffffffff
1339 1339 d ffffffffffffffffffffffffffffffff
1349 1349 d ffffffffffffffffffffffffffffffff
1359 1359 d ffffffffffffffffffffffffffffffff
1369 1369 d ffffffffffffffffffffffffffffffff
1379 1379 d ffffffffffffffffffffffffffffffff
1389 1389 d ffffffffffffffffffffffffffffffff
1399 1399 d ffffffffffffffffffffffffffffffff
13a9 13a9 d ffffffffffffffffffffffffffffffff
13b9 13b9 d ffffffffffffffffffffffffffffffff
13c9 13c9 d ffffffffffffffffffffffffffffffff
13d9 13d9 d ffffffffffffffffffffffffffffffff
13e9 13e9 d ffffffffffffffffffffffffffffffff
13f9 13f9 d ffffffffffffffffffffffffffffffff
1409 1409 d ffffffffffffffffffffffffffffffff
1419 1419 d ffffffffffffffffffffffffffffffff
1429 1429 d ffffffffffffffffffffffffffffffff
1439 1439 d ffffffffffffffffffffffffffffffff
1449 1449 d ffffffffffffffffffffffffffffffff
1459 1459 d ffffffffffffffffffffffffffffffff
1469 1469 d ffffffffffffffffffffffffffffffff
1479 1479 d ffffffffffffffffffffffffffffffff
1489 1489 d ffffffffffffffffffffffffffffffff
1499 1499 d ffffffffffffffffffffffffffffffff
14a9 14a9 d ffffffffffffffffffffffffffffffff
14b9 14b9 d ffffffffffffffffffffffffffffffff
14c9 14c9 d ffffffffffffffffffffffffffffffff
14d9 14d9 d ffffffffffffffffffffffffffffffff
14e9 14e9 d ffffffffffffffffffffffffffffffff
14f9 14f9 d ffffffffffffffffffffffffffffffff
1509 1509 d ffffffffffffffffffffffffffffffff
1519 1519 d ffffffffffffffffffffffffffffffff
1529 1529 d ffffffffffffffffffffffffffffffff
1539 1539 d ffffffffffffffffffffffffffffffff
1549 1549 d ffffffffffffffffffffffffffffffff
1559 1559 d ffffffffffffffffffffffffffffffff
1569 1569 d ffffffffffffffffffffffffffffffff
1579 1579 d ffffffffffffffffffffffffffffffff
1589 1589 d ffffffffffffffffffffffffffffffff
1599 1599 d ffffffffffffffffffffffffffffffff
15a9 15a9 d ffffffffffffffffffffffffffffffff
15b9 15b9 d ffffffffffffffffffffffffffffffff
15c9 15c9 d ffffffffffffffffffffffffffffffff
15d9 15d9 d ffffffffffffffffffffffffffffffff
15e9 15e9 d ffffffffffffffffffffffffffffffff
15f9 15f9 d ffffffffffffffffffffffffffffffff
1609 1609 d ffffffffffffffffffffffffffffffff
1619 1619 d ffffffffffffffffffffffffffffffff
1629 1629 d ffffffffffffffffffffffffffffffff
1639 1639 d ffffffffffffffffffffffffffffffff
1649 1649 d ffffffffffffffffffffffffffffffff
1659 1659 d ffffffffffffffffffffffffffffffff
1669 1669 d ffffffffffffffffffffffffffffffff
1679 1679 d ffffffffffffffffffffffffffffffff
1689 1689 d ffffffffffffffffffffffffffffffff
1699 1699 d ffffffffffffffffffffffffffffffff
16a9 16a9 d ffffffffffffffffffffffffffffffff
16b9 16b9 d ffffffffffffffffffffffffffffffff
16c9 16c9 d ffffffffffffffffffffffffffffffff
16d9 16d9 d ffffffffffffffffffffffffffffffff
16e9 16e9 d ffffffffffffffffffffffffffffffff
16f9 16f9 d ffffffffffffffffffffffffffffffff
1709 1709 d ffffffffffffffffffffffffffffffff
1719 1719 d ffffffffffffffffffffffffffffffff
1729 1729 d ffffffffffffffffffffffffffffffff
1739 1739 d ffffffffffffffffffffffffffffffff
1749 1749 d ffffffffffffffffffffffffffffffff
1759 1759 d ffffffffffffffffffffffffffffffff
1769 1769 d ffffffffffffffffffffffffffffffff
1779 1779 d ffffffffffffffffffffffffffffffff
1789 1789 d ffffffffffffffffffffffffffffffff
1799 1799 d ffffffffffffffffffffffffffffffff
17a9 17a9 d ffffffffffffffffffffffffffffffff
17b9 17b9 d ffffffffffffffffffffffffffffffff
17c9 17c9 d ffffffffffffffffffffffffffffffff
17d9 17d9 d ffffffffffffffffffffffffffffffff
17e9 17e9 d ffffffffffffffffffffffffffffffff
17f9 17f9 d ffffffffffffffffffffffffffffffff
1809 1809 d ffffffffffffffffffffffffffffffff
1819 1819 d ffffffffffffffffffffffffffffffff
1829 1829 d ffffffffffffffffffffffffffffffff
1839 1839 d ffffffffffffffffffffffffffffffff
1849 1849 d ffffffffffffffffffffffffffffffff
1859 1859 d ffffffffffffffffffffffffffffffff
1869 1869 d ffffffffffffffffffffffffffffffff
1879 1879 d ffffffffffffffffffffffffffffffff
1889 1889 d ffffffffffffffffffffffffffffffff
1899 1899 d ffffffffffffffffffffffffffffffff
18a9 18a9 d ffffffffffffffffffffffffffffffff
18b9 18b9 d ffffffffffffffffffffffffffffffff
18c9 18c9 d ffffffffffffffffffffffffffffffff
18d9 18d9 d ffffffffffffffffffffffffffffffff
18e9 18e9 d ffffffffffffffffffffffffffffffff
18f9 18f9 d ffffffffffffffffffffffffffffffff
1909 1909 d ffffffffffffffffffffffffffffffff
1919 1919 d ffffffffffffffffffffffffffffffff
1929 1929 d ffffffffffffffffffffffffffffffff
1939 1939 d ffffffffffffffffffffffffffffffff
1949 1949 d ffffffffffffffffffffffffffffffff
1959 1959 d ffffffffffffffffffffffffffffffff
1969 1969 d ffffffffffffffffffffffffffffffff
1979 1979 d ffffffffffffffffffffffffffffffff
1989 1989 d ffffffffffffffffffffffffffffffff
1999 1999 d ffffffffffffffffffffffffffffffff
19a9 19a9 d ffffffffffffffffffffffffffffffff
19b9 19b9 d ffffffffffffffffffffffffffffffff
19c9 19c9 d ffffffffffffffffffffffffffffffff
19d9 19d9 d ffffffffffffffffffffffffffffffff
19e9 19e9 d ffffffffffffffffffffffffffffffff
19f9 19f9 d ffffffffffffffffffffffffffffffff
1a09 1a09 d ffffffffffffffffffffffffffffffff
1a19 1a19 d ffffffffffffffffffffffffffffffff
1a29 1a29 d ffffffffffffffffffffffffffffffff
1a39 1a39 d ffffffffffffffffffffffffffffffff
1a49 1a49 d ffffffffffffffffffffffffffffffff
1a59 1a59 d ffffffffffffffffffffffffffffffff
1a69 1a69 d ffffffffffffffffffffffffffffffff
1a79 1a79 d ffffffffffffffffffffffffffffffff
1a89 1a89 d ffffffffffffffffffffffffffffffff
1a99 1a99 d ffffffffffffffffffffffffffffffff
1aa9 1aa9 d ffffffffffffffffffffffffffffffff
1ab9 1ab9 d ffffffffffffffffffffffffffffffff
1ac9 1ac9 d ffffffffffffffffffffffffffffffff
1ad9 1ad9 d ffffffffffffffffffffffffffffffff
1ae9 1ae9 d ffffffffffffffffffffffffffffffff
1af9 1af9 d ffffffffffffffffffffffffffffffff
1b09 1b09 d ffffffffffffffffffffffffffffffff
1b19 1b19 d ffffffffffffffffffffffffffffffff
1b29 1b29 d ffffffffffffffffffffffffffffffff
1b39 1b39 d ffffffffffffffffffffffffffffffff
1b49 1b49 d ffffffffffffffffffffffffffffffff
1b59 1b59 d ffffffffffffffffffffffffffffffff
1b69 1b69 d ffffffffffffffffffffffffffffffff
1b79 1b79 d ffffffffffffffffffffffffffffffff
1b89 1b89 d ffffffffffffffffffffffffffffffff
1b99 1b99 d ffffffffffffffffffffffffffffffff
1ba9 1ba9 d ffffffffffffffffffffffffffffffff
1bb9 1bb9 d ffffffffffffffffffffffffffffffff
1bc9 1bc9 d ffffffffffffffffffffffffffffffff
1bd9 1bd9 d ffffffffffffffffffffffffffffffff
1be9 1be9 d ffffffffffffffffffffffffffffffff
1bf9 1bf9 d ffffffffffffffffffffffffffffffff
1c09 1c09 d ffffffffffffffffffffffffffffffff
1c19 1c19 d ffffffffffffffffffffffffffffffff
1c29 1c29 d ffffffffffffffffffffffffffffffff
1c39 1c39 d ffffffffffffffffffffffffffffffff
1c49 1c49 d ffffffffffffffffffffffffffffffff
1c59 1c59 d ffffffffffffffffffffffffffffffff
1c69 1c69 d ffffffffffffffffffffffffffffffff
1c79 1c79 d ffffffffffffffffffffffffffffffff
1c89 1c89 d ffffffffffffffffffffffffffffffff
1c99 1c99 d ffffffffffffffffffffffffffffffff
1ca9 1ca9 d ffffffffffffffffffffffffffffffff
1cb9 1cb9 d ffffffffffffffffffffffffffffffff
1cc9 1cc9 d ffffffffffffffffffffffffffffffff
1cd9 1cd9 d ffffffffffffffffffffffffffffffff
1ce9 1ce9 d ffffffffffffffffffffffffffffffff
1cf9 1cf9 d ffffffffffffffffffffffffffffffff
1d09 1d09 d ffffffffffffffffffffffffffffffff
1d19 1d19 d ffffffffffffffffffffffffffffffff
1d29 1d29 d ffffffffffffffffffffffffffffffff
1d39 1d39 d ffffffffffffffffffffffffffffffff
1d49 1d49 d ffffffffffffffffffffffffffffffff
1d59 1d59 d ffffffffffffffffffffffffffffffff
1d69 1d69 d ffffffffffffffffffffffffffffffff
1d79 1d79 d ffffffffffffffffffffffffffffffff
1d89 1d89 d ffffffffffffffffffffffffffffffff
1d99 1d99 d ffffffffffffffffffffffffffffffff
1da9 1da9 d ffffffffffffffffffffffffffffffff
1db9 1db9 d ffffffffffffffffffffffffffffffff
1dc9 1dc9 d ffffffffffffffffffffffffffffffff
1dd9 1dd9 d ffffffffffffffffffffffffffffffff
1de9 1de9 d ffffffffffffffffffffffffffffffff
1df9 1df9 d ffffffffffffffffffffffffffffffff
1e09 1e09 d ffffffffffffffffffffffffffffffff
1e19 1e19 d ffffffffffffffffffffffffffffffff
1e29 1e29 d ffffffffffffffffffffffffffffffff
1e39 1e39 d ffffffffffffffffffffffffffffffff
1e49 1e49 d ffffffffffffffffffffffffffffffff
1e59 1e59 d ffffffffffffffffffffffffffffffff
1e69 1e69 d ffffffffffffffffffffffffffffffff
1e79 1e79 d ffffffffffffffffffffffffffffffff
1e89 1e89 d ffffffffffffffffffffffffffffffff
1e99 1e99 d ffffffffffffffffffffffffffffffff
1ea9 1ea9 d ffffffffffffffffffffffffffffffff
1eb9 1eb9 d ffffffffffffffffffffffffffffffff
1ec9 1ec9 d ffffffffffffffffffffffffffffffff
1ed9 1ed9 d ffffffffffffffffffffffffffffffff
1ee9 1ee9 d ffffffffffffffffffffffffffffffff
1ef9 1ef9 d ffffffffffffffffffffffffffffffff
1f09 1f09 d ffffffffffffffffffffffffffffffff
1f19 1f19 d ffffffffffffffffffffffffffffffff
1f29 1f29 d ffffffffffffffffffffffffffffffff
1f39 1f39 d ffffffffffffffffffffffffffffffff
1f49 1f49 d ffffffffffffffffffffffffffffffff
1f59 1f59 d ffffffffffffffffffffffffffffffff
1f69 1f69 d ffffffffffffffffffffffffffffffff
1f79 1f79 d ffffffffffffffffffffffffffffffff
1f89 1f89 d ffffffffffffffffffffffffffffffff
1f99 1f99 d ffffffffffffffffffffffffffffffff
1fa9 1fa9 d ffffffffffffffffffffffffffffffff
1fb9 1fb9 d ffffffffffffffffffffffffffffffff
1fc9 1fc9 d ffffffffffffffffffffffffffffffff
1fd9 1fd9 d ffffffffffffffffffffffffffffffff
1fe9 1fe9 d ffffffffffffffffffffffffffffffff
1ff9 1ff9 d ffffffffffffff
2000 2000 s 
2000 2000 s 
2000 2000 s 
2000 2000 s ; --------------- DATA AREAS --------------------
2000 2000 s 
2000 2000 s     org ROM_END
2000 2000 s 
2000 2000 s ; Define data areas in RAM here
2000 2000 s 
2000 2000 s DAT_CURRENT_PORT:         ds 1
2001 2001 s DAT_INPUT_BUFFER:         ds 256
2101 2101 s 
2101 2101 s 
2101 2101 s     end main
003b e
003b a main
0065 a conin
0196 a iomon
006f a const
0059 a conout
01bb a prompt
003e v io_ebcr
ffff v ram_end
0114 a fdc_isr
006f a haschar
0259 a mon_end
0020 v io_tccr
2000 v rom_end
000a v term_lf
000d v term_cr
0008 v term_bs
011f a rtc_isr
010f a str_cls
0065 a readchar
01fd a proc_end
007f v term_del
004c v io_rtc_w
0149 a parsehex
012a a printhex
0046 v io_rtc_d1
0010 v io_pit_c0
0011 v io_pit_c1
0012 v io_pit_c2
0044 v io_rtc_h1
0040 v io_rtc_s1
004a v io_rtc_y1
0047 v io_rtc_d10
004d v io_rtc_cd
004e v io_rtc_ce
0045 v io_rtc_h10
004f v io_rtc_cf
0041 v io_rtc_s10
258000 v cpu_speed
004b v io_rtc_y10
0059 a printchar
01d4 a proc_loop
0173 a parsebyte
0000 v term_null
0042 v io_rtc_mi1
0002 v bit_rtc_t0
0003 v bit_rtc_t1
0048 v io_rtc_mo1
0255 a command_di
0251 a command_ei
003c v io_ivr_fdc
0208 a command_in
0043 v io_rtc_mi10
0049 v io_rtc_mo10
0020 v term_space
003d v io_ivr_rtc
00e8 a str_fdcint
0091 a readstring
018d a skipwhites
00f3 a str_rtcint
0031 v io_fdc_data
0135 a _printhex_1
0143 a _printhex_2
0145 a _printhex_3
0002 v bit_rtc_24_12
0079 a _haschar_no
0038 v io_fdc_cont
0034 v io_fdc_oper
0030 v io_fdc_stat
00e1 a clearscreen
0000 v io_uart_dat
0001 v io_uart_com
021f a command_out
0013 v io_pit_ctrl
003e a _setup_loop
0020 v term_rubout
007b a printstring
0004 v bit_fdc_busy
0000 v bit_rtc_hold
0000 v bit_rtc_mask
00ff v uart_div_val
0007 v bit_uart_dsr
0001 v bit_uart_dtr
0000 v bit_rtc_rest
0170 a _parse_error
0003 v bit_rtc_test
023a a command_port
0001 v bit_rtc_busy
0001 v bit_rtc_stop
0005 v bit_uart_rts
00d6 a printnewline
0005 v bit_fdc_ready
0002 v bit_rtc_pm_am
0000 v bit_ebcr_test
0002 v bit_uart_rxen
0000 v bit_uart_txen
0163 a _parsehex_nolc
0004 v bit_fdc_track_0
0001 v bit_uart_rxrdy
0006 v bit_tccr_c0_out
0000 v bit_uart_txrdy
0002 v bit_fdc_no_data
00d1 a _readstring_end
0004 v bit_fdc_overrun
0002 v bit_tccr_c0_gate
0003 v bit_tccr_c1_gate
0004 v bit_tccr_c2_gate
005a a _printchar_wait
0006 v bit_uart_syndet
008a a _printstring_lf
0005 v bit_fdc_seek_end
0002 v bit_fdc_scan_not
0002 v bit_rtc_irq_flag
0007 v bit_ebcr_irq_opl
0000 v bit_fdc_datarate0
0001 v bit_fdc_datarate1
2001 a dat_input_buffer
0000 v bit_fdc_fdd0_busy
0001 v bit_fdc_fdd1_busy
0002 v bit_fdc_fdd2_busy
0003 v bit_fdc_fdd3_busy
0094 a _readstring_loop
2000 a dat_current_port
0003 v bit_rtc_30_sec_adj
0005 v bit_fdc_exec_mode
0002 v bit_uart_txempty
0003 v bit_fdc_not_ready
0000 v bit_tccr_rom_gate
0001 v bit_tccr_io_reset
0156 a _parsehex_nodigit
0000 v bit_fdc_powerdown
0003 v bit_fdc_dma_enable
0003 v bit_fdc_scan_equal
0005 v bit_fdc_data_error
0006 v bit_fdc_data_input
0002 v bit_fdc_soft_reset
2580 v conf_uart_baudrate
003d v io_tccr_write_mask
0007 v bit_uart_hunt_mode
00fe a str_invalidcommand
0006 v bit_uart_int_reset
0001 v bit_rtc_itrpt_stnd
0002 v bit_fdc_head_select
0007 v bit_fdc_mode_select
0003 v bit_uart_send_break
0001 v bit_tccr_tape_sense
0006 v bit_tccr_tape_motor
0003 v bit_uart_parity_err
0001 v bit_fdc_bad_cylinder
0000 v bit_fdc_drive_select
0006 v bit_fdc_control_mark
0005 v bit_uart_framing_err
0000 v bit_fdc_unit_select_0
0001 v bit_fdc_unit_select_1
0004 v bit_uart_reset_error
0004 v bit_uart_overrun_err
00b7 a _readstring_backspace
0001 v bit_fdc_not_writeable
0005 v bit_tccr_c1_int_enable
0004 v bit_fdc_motor_enable_1
0005 v bit_fdc_motor_enable_2
0005 v bit_fdc_sr3_data_error
018b a _parsebyte_nobyteleft
0004 v bit_fdc_wrong_cylinder
0006 v bit_fdc_interrupt_code0
0007 v bit_fdc_interrupt_code1
0007 v bit_tccr_tape_data_read
0007 v bit_fdc_end_of_cylinder
0002 v bit_fdc_disable_precomp
0004 v bit_fdc_equipment_check
0003 v bit_fdc_write_protected
0000 v bit_fdc_sr0_unit_select_0
0001 v bit_fdc_sr0_unit_select_1
0007 v bit_tccr_tape_data_write
0007 v bit_fdc_request_for_master
0000 v bit_fdc_missing_adress_mark
0006 v bit_fdc_write_protected_legacy
0000 v bit_fdc_missing_adress_mark_in_data_fiel
